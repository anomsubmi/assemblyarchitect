+++LEVEL STARTS 01

QUANTITY 17

MSG 01
Welcome to Level 01
MSG_END

MSG 02
First, read the challenge description
MSG_END

MSG 03
Objective: move items from the Input Buffer [IB]
MSG_END

MSG 04
To the Output Buffer [OB]
MSG_END

MSG 05
Values recovered from the Input Buffer [IB], must go to a register first
MSG_END

MSG 06
Select and drag the "mov" instruction from the instruction box
MSG_END

MSG 07
Drop the instruction in the code box
MSG_END

MSG 08
Select "rax" as the destination operand (where the value will be stored)
MSG_END

MSG 09
Select the Input Buffer [IB] as the source operand (from where the value is recovered)
MSG_END

MSG 10
Press the play button to see what the instruction does
MSG_END

MSG 11
The value was moved to rax but not to the Output Buffer [OB]
MSG_END

MSG 12
Select and drag another "mov" instruction from the instruction box
MSG_END

MSG 13
Drop the instruction in the code box below the previous instruction
MSG_END

MSG 14
Select the Output Buffer [OB] as the destination operand
MSG_END

MSG 15
Select rax as the source operand
MSG_END

MSG 16
Press the play button
MSG_END

MSG 17
Congratulations, you have beaten the first level
MSG_END

+++LEVEL ENDS 01

+++LEVEL STARTS 02

QUANTITY 8

MSG 01
Welcome to Level 02
MSG_END

MSG 02
We will learn how to rearrange, delete and change operands of the instruction
MSG_END

MSG 03
Select and drag the last instruction by clicking in the instruction name
MSG_END

MSG 04
Drag the instruction out of the code box to delete it
MSG_END

MSG 05
Click the source operand of the instruction to change it
MSG_END

MSG 06
Select the Input Buffer [IB] as the source operand
MSG_END

MSG 07
Select and drag the second instruction and move in to the first position
MSG_END

MSG 08
Press the play button
MSG_END

+++LEVEL ENDS 02

+++LEVEL STARTS 03

QUANTITY 11

MSG 01
Welcome to Level 03
MSG_END

MSG 02
A value retrieved from the Input Buffer [IB] can only be read once
MSG_END

MSG 03
A value stored on a register can be read multiple times
MSG_END

MSG 04
Select and drag the "mov" instruction from the instruction box
MSG_END

MSG 05
Drop the instruction in the code box
MSG_END

MSG 06
All available operands for selection will be pointed with an arrow
MSG_END

MSG 07
Select "rax"
MSG_END

MSG 08
Only valid operands combinations will be available for selection
MSG_END

MSG 09
Select Input Buffer [IB]
MSG_END

MSG 10
Use more "mov" instructions to solve the challenge
MSG_END

MSG 11
Use
"mov [OB], rax"
several times to solve the challenge
MSG_END

+++LEVEL ENDS 03

+++LEVEL STARTS 04

QUANTITY 2

MSG 01
Welcome to Level 04
MSG_END

MSG 02
Solve the challenge by yourself applying what has been learned
MSG_END

+++LEVEL ENDS 04

+++LEVEL STARTS 05

QUANTITY 2

MSG 01
Welcome to Level 05
MSG_END

MSG 02
There are more registers available. Use them to solve the challenge
MSG_END

+++LEVEL ENDS 05

+++LEVEL STARTS 06

QUANTITY 4

MSG 01
Welcome to Level 06
MSG_END

MSG 02
Notice that there is a new instruction available: "add"
MSG_END

MSG 03
Usage:
"add OP1, OP2"
does OP1 + OP2 and stores the result in OP1
MSG_END

MSG 04
Solve the challenge using the "mov" and "add" instructions
MSG_END

+++LEVEL ENDS 06

+++LEVEL STARTS 07

QUANTITY 3

MSG 01
Welcome to Level 07
MSG_END

MSG 02
Did you know that "mov" "add" can be used with both operands being registers?
MSG_END

MSG 03
Example:
"mov rbx, rax"
moves the value from "rax" to "rbx"
MSG_END

+++LEVEL ENDS 07

+++LEVEL STARTS 08

QUANTITY 3

MSG 01
You are now in Level 08
MSG_END

MSG 02
Both operands of instructions "mov" "add" can be the same register
MSG_END

MSG 03
Example:
"add rax, rax"
does rax + rax and stores the result in rax
MSG_END

+++LEVEL ENDS 08

+++LEVEL STARTS 09

QUANTITY 6

MSG 01
Congratulations!
You are in Level 09
MSG_END

MSG 02
Notice that you can only use 3 instructions to solve the challenge
MSG_END

MSG 03
The "jmp" instruction jumps to another line of code
MSG_END

MSG 04
Select and drag a "jmp" instruction
MSG_END

MSG 05
Place the "jmp" instruction in the code box at the last position
MSG_END

MSG 06
Place the "jmp" destination "LINE" above the first line of code
MSG_END

+++LEVEL ENDS 09







































