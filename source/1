#include <stdio.h>
#include <stdlib.h>
#include "mouse_ms.h"
#include <assert.h>
#include <stdbool.h>
#include <SDL.h>

typedef struct mouse_t{
	
	int x;
	int y;
	int scroll_x;
	int scroll_y;
	bool button_enable;
	bool left_pressed;
	bool left_released;
	bool left_one_click;
	
} mouse_t;

static mouse_t mouse;

static void set_mouse_x(int x);
static void set_mouse_y(int y);
static void set_mouse_scroll_x(int x);
static void set_mouse_scroll_y(int y);
static void set_mouse_left_pressed(bool s);
static void set_mouse_left_released(bool s);
static void set_mouse_button_enable(bool s);

static void clear_mouse_left_released();

static bool get_mouse_left_pressed();
static bool get_mouse_left_released();



/* Function: ms_get_mouse_button_enable
 * -----------------------------------------------------------------------------
 * This function is used for obtaining the status of the mouse enable button
 *
 * Arguments:
 *	none.
 *
 * Return:
 *	bool with the state of the button enable attribute.
 */
bool ms_get_mouse_button_enable()
{
	return mouse.button_enable;
}

/* Function: get_mouse_left_pressed
 * -----------------------------------------------------------------------------
 * This function is used for obtaining the status of mouse left pressed
 *
 * Arguments:
 *	none.
 *
 * Return:
 *	bool with the state of the button enable attribute.
 */
static bool get_mouse_left_pressed()
{
	return mouse.left_pressed;
}

/* Function: get_mouse_left_released
 * -----------------------------------------------------------------------------
 * This function is used for obtaining the status of mouse left released
 *
 * Arguments:
 *	none.
 *
 * Return:
 *	bool with the state of the button enable attribute.
 */
bool ms_get_mouse_left_released()
{
	return mouse.left_released;
}

/* Function: ms_init_mouse
 * -----------------------------------------------------------------------------
 * This function is initializes 
 *
 * Arguments:
 *	x: x coordinate of mouse;
 *
 * Return:
 *	void.
 */

void ms_init_mouse()
{
	set_mouse_x(0);
	set_mouse_y(0);
	set_mouse_left_pressed(false);
	set_mouse_left_released(false);
	set_mouse_button_enable(true);

	return;
}

/* Function: set_mouse_scroll_x
 * -----------------------------------------------------------------------------
 * This function is used for setting the scroll of the x coordinate of the 
 * mouse.
 *
 * Arguments:
 *	x: x scroll of mouse;
 *
 * Return:
 *	void.
 */
static void set_mouse_scroll_x(int x)
{
	mouse.scroll_x = x;
	return;
}

/* Function: set_mouse_scroll_y
 * -----------------------------------------------------------------------------
 * This function is used for setting the scroll of the y coordinate of the 
 * mouse.
 *
 * Arguments:
 *	y: y scroll of mouse;
 *
 * Return:
 *	void.
 */
static void set_mouse_scroll_y(int y)
{
	mouse.scroll_y = y;
	return;
}

/* Function: set_mouse_x
 * -----------------------------------------------------------------------------
 * This function is used for setting the x coordinate of the mouse.
 *
 * Arguments:
 *	x: x coordinate of mouse;
 *
 * Return:
 *	void.
 */
static void set_mouse_x(int x)
{
	mouse.x = x;
	return;
}

/* Function: set_mouse_y
 * -----------------------------------------------------------------------------
 * This function is used for setting the y coordinate of the mouse.
 *
 * Arguments:
 *	y: y coordinate of mouse;
 *
 * Return:
 *	void.
 */
static void set_mouse_y(int y)
{
	mouse.y = y;
	return;
}

/* Function: set_mouse_left_pressed
 * -----------------------------------------------------------------------------
 * This function is used for setting the pressed attribute of the left button
 * of the mouse;
 *
 * Arguments:
 *	s: state that will be set for the left button;
 *
 * Return:
 *	void.
 */
static void set_mouse_left_pressed(bool s)
{
	mouse.left_pressed = s;
	return;
}

/* Function: set_mouse_left_one_click
 * -----------------------------------------------------------------------------
 * Sets the one click flag of the mouse object
 *
 * Arguments:
 *	s: state that will be set for the left button;
 *
 * Return:
 *	void.
 */
static void set_mouse_left_one_click(bool s)
{
	mouse.left_one_click = s;
	return;
}
/* Function: set_mouse_left_released
 * -----------------------------------------------------------------------------
 * This function is used for setting the pressed attribute of the left button
 * of the mouse;
 *
 * Arguments:
 *	s: state that will be set for the left button.
 *
 * Return:
 *	void.
 */
static void set_mouse_left_released(bool s)
{
	mouse.left_released = s;
	return;
}

/* Function: set_mouse_button_enable
 * -----------------------------------------------------------------------------
 * This function is used for setting the enable attribute of the mouse object.
 *
 * Arguments:
 *	s: state that will be set the enable attribute of the mouse.
 *
 * Return:
 *	void.
 */
static void set_mouse_button_enable(bool s)
{
	mouse.button_enable = s;
	return;
}

/* Function: ms_clear_mouse_values
 * -----------------------------------------------------------------------------
 * This function is used for clearing the values not used in the mouse for next
 * game cycles
 *
 * Arguments:
 *
 * Return:
 *	void.
 */
void ms_clear_mouse_values()
{
	set_mouse_scroll_x(0);
	set_mouse_scroll_y(0);
	set_mouse_left_released(false);
	set_mouse_left_one_click(false);
	return;
}

/* Function: clear_mouse_left_released
 * -----------------------------------------------------------------------------
 * This function is used for clearing the released button of the mouse in
 * external functions;
 *
 * Arguments:
 *
 * Return:
 *	void.
 */
static void clear_mouse_left_released()
{
	set_mouse_left_released(false);
	return;
}
/* Function: ms_get_mouse_x
 * -----------------------------------------------------------------------------
 * This functions returns the x coordinate of the mouse object
 *
 * Arguments:
 *	None.
 *
 * Return:
 *	The x coordinate of the mouse.
 */
int ms_get_mouse_x()
{
	return mouse.x;
}

/* Function: ms_get_mouse_y
 * -----------------------------------------------------------------------------
 * This functions returns the y coordinate of the mouse object
 *
 * Arguments:
 *	None.
 *
 * Return:
 *	The y coordinate of the mouse.
 */
int ms_get_mouse_y()
{
	return mouse.y;
}

/* Function: ms_get_mouse_scroll_y
 * -----------------------------------------------------------------------------
 * This functions returns the y coordinate of the mouse object
 *
 * Arguments:
 *	None.
 *
 * Return:
 *	The y coordinate of the mouse.
 */
int ms_get_mouse_scroll_y()
{
	int cur_y = mouse.scroll_y;
	set_mouse_scroll_y(0);
	return cur_y;
}

/* Function: ms_check_mouse_left_pressed
 * -----------------------------------------------------------------------------
 * This functions verifies if the left button of the mouse is pressed.
 *
 * Arguments:
 *	None.
 *
 * Return:
 *	true if the left button of the mouse is pressed, false if otherwise
 */
bool ms_check_mouse_left_pressed()
{
	return mouse.left_pressed;
}

/* Function: ms_check_mouse_left_released
 * -----------------------------------------------------------------------------
 * This functions verifies if the left button of the mouse is released.
 *
 * Arguments:
 *	None.
 *
 * Return:
 *	true if the left button of the mouse is released, false if otherwise
 */
bool ms_check_mouse_left_released()
{
	bool released =  ms_get_mouse_left_released();
	bool enable = ms_get_mouse_button_enable();

	bool check = released & enable;
	
	if (released == true){
		set_mouse_button_enable(true);
	}

	return check;
}

/* Function: ms_mouse_button_handler
 * -----------------------------------------------------------------------------
 * This functions handles the mouse action from the main
 *
 * Arguments:
 *	e: The event union struct used for the handling of the mouse.
 *
 * Return:
 *	Void
 */
void ms_mouse_button_handler(SDL_Event e)
{
	set_mouse_x(e.button.x);
	set_mouse_y(e.button.y);

	switch (e.button.button){
		case SDL_BUTTON_LEFT:
			if (SDL_PRESSED == e.button.state){
				set_mouse_left_pressed(true);
				set_mouse_left_released(false);
				set_mouse_left_one_click(true);
			} else if (SDL_RELEASED == e.button.state){
				set_mouse_left_pressed(false);
				set_mouse_left_released(true);
			}
		break;
		default:
			mouse.left_pressed = false;
			mouse.left_released = false;
			break;
	}	
	return;
}

/* Function: ms_mouse_motion_handler
 * -----------------------------------------------------------------------------
 * This functions handles the mouse motion for movement
 *
 * Arguments:
 *
 * Return:
 *	Void
 */
void ms_mouse_motion_handler(SDL_Event e)
{
	
	set_mouse_x(e.motion.x);
	set_mouse_y(e.motion.y);

	return;
}

/* Function: ms_mouse_wheel_handler
 * -----------------------------------------------------------------------------
 * This functions handles the mouse motion for movement
 *
 * Arguments:
 *
 * Return:
 *	Void
 */
void ms_mouse_wheel_handler(SDL_Event e)
{
	
	set_mouse_scroll_x(e.wheel.x);
	set_mouse_scroll_y(e.wheel.y);

	return;
}

/* Function: ms_disable_mouse_button
 * -----------------------------------------------------------------------------
 * This function sets the parameter attribute of the mouse to false. This is
 * used when a click is needed to perform just one action (a pressed or 
 * released but no both).
 *
 * Arguments:
 *	none.
 *
 * Return:
 *	void.
 */
void ms_disable_mouse_button()
{
	set_mouse_button_enable(false);
	return;
}
